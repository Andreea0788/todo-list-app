{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","title","value","onClick","deleteTodo","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","App","useState","todos","setTodos","input","setInput","e","preventDefault","index","target","splice","useEffect","console","log","collection","onSnapshot","snapshot","docs","map","doc","data","onChange","type","disabled","add","delete","todo","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAkBeA,G,MAfF,SAACC,GACZ,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,OACX,4BACED,UAAU,aACVE,MAAOH,EAAMG,MACbC,QAASJ,EAAMK,YAHjB,a,gBCOSC,E,OAZKC,EAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAGcC,YCoERC,MA3Ef,WAAe,MAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIaF,mBAAS,IAJtB,mBAING,EAJM,KAICC,EAJD,KAgCb,SAASjB,EAAWkB,GAClBA,EAAEC,iBACF,IAAIC,EAAQF,EAAEG,OAAOvB,MACrBgB,EAAMQ,OAAOF,EAAO,GACpBL,EAAS,YAAID,IAGf,OAjCAS,qBAAU,WACRC,QAAQC,IAAI,mCAEZxB,EAAGyB,WAAW,SAASC,YAAW,SAACC,GACjCb,EAASa,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,OAAOnC,eAEhD,IA4BD,yBAAKD,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UACb,gDACA,0BAAMA,UAAU,cACd,2BACEA,UAAU,YACVE,MAAOkB,EACPiB,SAAU,SAACf,GAAD,OAAOD,EAASC,EAAEG,OAAOvB,QACnCoC,KAAK,SAEP,4BACEtC,UAAU,aACVuC,UAAWnB,EACXkB,KAAK,SACLnC,QAzCS,SAACmB,GAGpBA,EAAEC,iBAIFlB,EAAGyB,WAAW,SAASU,IAAI,CACzBvC,MAAOmB,IAETC,EAAS,IAGThB,EAAGyB,WAAW,SAASK,IAAI,WAAWM,WAwB9B,WAWHvB,EAAMgB,KAAI,SAACQ,EAAMlB,GAAP,OACT,kBAAC,EAAD,CACEvB,MAAOyC,EACPC,IAAKnB,EACLtB,MAAOsB,EACPpB,WAAYA,UC5DJwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.efe73a4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nconst Todo = (props) => {\r\n  return (\r\n    <div className=\"todo\">\r\n      <h3>{props.title}</h3>\r\n      <button\r\n        className=\"delete-btn\"\r\n        value={props.value}\r\n        onClick={props.deleteTodo}\r\n      >\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCQUTVeVrQu5MM-5GL-7tzs7y9ljusg2D0\",\r\n  authDomain: \"todo-list-app-818e1.firebaseapp.com\",\r\n  databaseURL: \"https://todo-list-app-818e1.firebaseio.com\",\r\n  projectId: \"todo-list-app-818e1\",\r\n  storageBucket: \"todo-list-app-818e1.appspot.com\",\r\n  messagingSenderId: \"788263253032\",\r\n  appId: \"1:788263253032:web:f3120b1e8eb52a069e711d\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport Todo from \"./Todo\";\nimport \"./App.css\";\nimport db from \"./firebase\";\n\nfunction App() {\n  // We need a list of todo's\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"I ran when the component loaded\");\n\n    db.collection(\"todos\").onSnapshot((snapshot) => {\n      setTodos(snapshot.docs.map((doc) => doc.data().title));\n    });\n  }, []);\n\n  const handleSubmit = (e) => {\n    // 1) add whatever is in the input to the todos array\n    // 2) clear the input field\n    e.preventDefault();\n\n    // setTodos([...todos, input]);\n    // add user input to Firebase\n    db.collection(\"todos\").add({\n      title: input,\n    });\n    setInput(\"\");\n\n    // delete from Firebase\n    db.collection(\"todos\").doc(\"Auto-ID\").delete();\n  };\n\n  // The delete Button\n\n  function deleteTodo(e) {\n    e.preventDefault();\n    let index = e.target.value;\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Andreea's todo's</h1>\n          <form className=\"todo-input\">\n            <input\n              className=\"input-box\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              type=\"text\"\n            />\n            <button\n              className=\"submit-btn\"\n              disabled={!input}\n              type=\"submit\"\n              onClick={handleSubmit}\n            >\n              + Add\n            </button>\n          </form>\n        </div>\n\n        {todos.map((todo, index) => (\n          <Todo\n            title={todo}\n            key={index}\n            value={index}\n            deleteTodo={deleteTodo}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}